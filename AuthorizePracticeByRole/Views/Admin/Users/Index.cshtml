@using SharedLibrary.Entities
@model AuthorizePracticeByRole.ViewModels.UserViewModel

@{
    ViewBag.Title = "Users";
}

<h2>@ViewBag.Title</h2>
<button class="btn btn-primary"
        type="button"
        data-fancybox
        data-animation-duration="700"
        data-src="#newUser">
    New
</button>
<form method="post" id="editForm" action="@(Url.RouteUrl("Default", new { action = "Edit", controller = "Users", id = Model.EditId }))">
    @Html.AntiForgeryToken()
    <table class="table">
        <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Users.First().Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Users.First().Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Users.First().Created)
            </th>
            <th>
                Actions
            </th>
        </tr>
        </thead>

        <tbody>
        @foreach (var item in Model.Users)
        {
            <tr>
                @{
                    var isEditMode = Model.EditId == item.Id;
                }
                @if (isEditMode)
                {
                    @EditUser(item)
                }
                else
                {
                    @DisplayUser(item)
                }
                <td>
                    @GenerateEditOrCancelLink(isEditMode, item)
                    @Html.ActionLink("Details", "Detail", new { id = item.Id }, new { @class = "btn btn-info" })
                    @GenerateDeleteButton(item)
                </td>
            </tr>
        }
        </tbody>
    </table>
</form>

@NewUserDiv()

@DeleteForm()

@* ******************************************************************************************************************** *@

@helper EditUser(User item)
{
    <td>
        @Html.DisplayFor(modelItem => item.Id)
        @Html.HiddenFor(modelItem => item.Id)
    </td>
    <td>
        @Html.EditorFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Created)
    </td>
}

@helper DisplayUser(User item)
{
    <td>
        @Html.DisplayFor(modelItem => item.Id)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Created)
    </td>
}

@helper GenerateEditOrCancelLink(bool isEditMode, User item)
{
    if (isEditMode)
    {
        <button class="btn btn-success" type="submit">Save</button>
        @Html.ActionLink("Cancel", "Index", new
                                            {
                                                id = (int?)null
                                            }, new
                                               {
                                                   @class = "btn btn-warning"
                                               })
    }
    else
    {
        @Html.ActionLink("Edit", "Index", new
                                          {
                                              id = item.Id
                                          }, new
                                             {
                                                 @class = "btn btn-primary"
                                             })
    }
}

@helper NewUserDiv()
{
    var newUser = new User();

    <style>
        .error {
            color: red;
            margin-left: 5px;
        }
        /*
            label.error {
              display: inline;
            }
        */
    </style>

    <div style="display: none;" id="newUser" class="animated-modal">
        <h2>New</h2>
        <form id="newForm"
              method="post"
              action="@(Url.RouteUrl("Default", new { action = "New", controller = "Users" }))">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label for="@(nameof(SharedLibrary.Entities.User.Account))">帳號</label>
                <input id="@(nameof(SharedLibrary.Entities.User.Account))"
                       name="@(nameof(SharedLibrary.Entities.User.Account))"
                       class="form-control"/>

                <label id="@(nameof(SharedLibrary.Entities.User.Account))-error"
                       class="error"
                       for="@(nameof(SharedLibrary.Entities.User.Account))"
                       style="display: none;">
                </label>
            </div>

            <div class="form-group">
                <label for="@(nameof(SharedLibrary.Entities.User.Password))">密碼</label>
                <input id="@(nameof(SharedLibrary.Entities.User.Password))"
                       name="@(nameof(SharedLibrary.Entities.User.Password))"
                       class="form-control"/>

                <label id="@(nameof(SharedLibrary.Entities.User.Password))-error"
                       class="error"
                       for="@(nameof(SharedLibrary.Entities.User.Password))"
                       style="display: none;">
                </label>
            </div>

            <div class="form-group">
                <label for="@(nameof(SharedLibrary.Entities.User.Name))">名稱</label>
                <input id="@(nameof(SharedLibrary.Entities.User.Name))"
                       name="@(nameof(SharedLibrary.Entities.User.Name))"
                       class="form-control"/>

                <label id="@(nameof(SharedLibrary.Entities.User.Name))-error"
                       class="error"
                       for="@(nameof(SharedLibrary.Entities.User.Name))"
                       style="display: none;">
                </label>
            </div>

            <button type="button"
                    id="newFormSubmit"
                    form="newForm"
                    class="btn btn-success">
                Submit
            </button>
        </form>
    </div>

    <script>

        window.addEventListener("load", function (event) {
          let validateNewFormUrl = "@(Url.RouteUrl("Default", new
                                                              {
                                                                  action = "ValidateNew",
                                                                  controller = "Groups"
                                                              }))"

          $("#newFormSubmit").click(function (event) {
            let formData = $("#newForm").serialize();
            CustomValidator.RemoteValidate(validateNewFormUrl, formData);
          });
        });

    </script>
}

@helper GenerateDeleteButton(Group item)
{
    <button class="btn btn-danger" type="button" onclick="DeleteGroup(@(item.Id))">Delete</button>
}

@helper DeleteForm()
{
    <form method="post" id="deleteForm" style="display: none">
        @Html.AntiForgeryToken()
        <input id="deleteGroup"/>
    </form>
}

@section bottomScripts {
    @Html.Partial("_FancyboxReference")
    <script src="~/Scripts/CustomValidator.js"></script>
    <script>
        function DeleteGroup(id){
            let confirmResult = confirm('確認是否刪除 GroupID: '+id+' ?');
            if(confirmResult === false)
                return;

             $('#deleteGroup').val(id);

            let deleteActionUrl = "@(Url.RouteUrl("Default", new
                                                             {
                                                                 action = "Delete",
                                                                 controller = "Groups"
                                                             }))";
             $('#deleteForm').prop("action",deleteActionUrl + '/' + id)
                             .submit();
        }
    </script>
}