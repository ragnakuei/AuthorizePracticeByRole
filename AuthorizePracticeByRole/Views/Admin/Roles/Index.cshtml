@using DAL.Entities
@model AuthorizePracticeByRole.ViewModels.RoleViewModel

@{
    ViewBag.Title = "Roles";
}

<h2>Roles</h2>
<button class="btn btn-primary"
        type="button"
        data-fancybox
        data-animation-duration="700"
        data-src="#newRole">
    New
</button>
<form method="post" id="editForm" action="@(Url.RouteUrl("Default", new { action = "Edit", controller = "Roles", id = Model.EditId }))">
    @Html.AntiForgeryToken()
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Roles.First().Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Roles.First().Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Roles.First().Created)
                </th>
                <th>
                    Actions
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model.Roles)
            {
                <tr>
                    @{
                        var isEditMode = Model.EditId == item.Id;
                    }
                    @if (isEditMode)
                    {
                        @EditRole(item)
                    }
                    else
                    {
                        @DisplayRole(item)
                    }
                    <td>
                        @GenerateEditOrCancelLink(isEditMode, item)
                        @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-info" })
                        @GenerateDeleteButton(item)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>

@NewRoleDiv()

@DeleteForm()

@* ******************************************************************************************************************** *@

@helper EditRole(Role item)
{
    <td>
        @Html.DisplayFor(modelItem => item.Id)
        @Html.HiddenFor(modelItem => item.Id)
    </td>
    <td>
        @Html.EditorFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Created)
    </td>
}

@helper DisplayRole(Role item)
{
    <td>
        @Html.DisplayFor(modelItem => item.Id)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Created)
    </td>
}

@helper GenerateEditOrCancelLink(bool isEditMode, Role item)
{
    if (isEditMode)
    {
        <button class="btn btn-success" type="submit">Save</button>
        @Html.ActionLink("Cancel", "Index", new { id = (int?)null }, new { @class = "btn btn-warning" })
    }
    else
    {
        @Html.ActionLink("Edit", "Index", new { id = item.Id }, new { @class = "btn btn-primary" })
    }
}

@helper NewRoleDiv()
{
    var newRole = new Role();

    <style>
        .error {
            color: red;
            margin-left: 5px;
        }
        /*
            label.error {
              display: inline;
            }
        */
    </style>

    <div style="display: none;" id="newRole" class="animated-modal">
        <h2>New</h2>
        <form id="newForm"
              method="post"
              action="@(Url.RouteUrl("Default", new { action = "New", controller = "Roles" }))">
            @Html.AntiForgeryToken()
            <div class="form-group">
                @* @Html.LabelFor(x => newRole.Name) *@
                <label for="@(nameof(Role.Name))">名稱</label>
                <input id="@(nameof(Role.Name))"
                       name="@(nameof(Role.Name))"
                       class="form-control" />

                <label id="@(nameof(Role.Name))-error"
                       class="error"
                       for="@(nameof(Role.Name))"
                       style="display: none;"></label>
            </div>
            @* <div class="checkbox"> *@
            @*     <label><input type="checkbox"> Remember me</label> *@
            @* </div> *@
            <button type="button"
                    id="newFormSubmit"
                    form="newForm"
                    class="btn btn-success">
                Submit
            </button>
        </form>
    </div>

    <script>

        window.addEventListener("load", function (event) {
          let validateNewFormUrl = "@(Url.RouteUrl("Default", new { action = "ValidateNew", controller = "Roles" }))"

          $("#newFormSubmit").click(function (event) {
            let formData = $("#newForm").serialize();
            CustomValidator.RemoteValidate(validateNewFormUrl, formData);
          });
        });

    </script>
}

@helper GenerateDeleteButton(Role item)
{
    <button class="btn btn-danger" type="button" onclick="DeleteRole(@(item.Id))">Delete</button>
}

@helper DeleteForm()
{
    <form method="post" id="deleteForm" style="display: none">
        @Html.AntiForgeryToken()
        <input id="deleteRole" />
    </form>
}

@section bottomScripts {
    @Html.Partial("_FancyboxReference")
    <script src="~/Scripts/CustomValidator.js"></script>
    <script>
        function DeleteRole(id){
            let confirmResult = confirm('確認是否刪除 RoleID: '+id+' ?');
            if(confirmResult === false)
                return;

             $('#deleteRole').val(id);

            let deleteActionUrl = "@(Url.RouteUrl("Default", new { action = "Delete", controller = "Roles"}))";
             $('#deleteForm').prop("action",deleteActionUrl + '/' + id)
                             .submit();
        }
    </script>
}